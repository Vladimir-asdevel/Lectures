//
//  CalculatorBrain.swift
//  Calculator
//
//  Created by mvv on 22.05.17.
//  Copyright ¬© 2017 MVV Corporation. All rights reserved.
//

import Foundation

/// "–ú–æ–∑–≥–∏" –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
struct CalculatorBrain
{
    /// –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    private var accumulator: Double?
    
    /// –û–ø–µ—Ä–∞—Ü–∏—è
    ///
    /// - constant: –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
    /// - unaryOperation: —É–Ω–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    /// - binaryOperation->Double: –±–∏–Ω–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    /// - equals: –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    private enum Operation {
        case constant(Double)
        case unaryOperation((Double) -> Double)
        case binaryOperation((Double,Double) -> Double)
        case equals
    }
    
    /// –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    private var operations: Dictionary<String,Operation> = [
        "œÄ" : Operation.constant(Double.pi),
        "e" : Operation.constant(M_E),
        "‚àö" : Operation.unaryOperation(sqrt),
        "cos" : Operation.unaryOperation(cos),
        "¬±" : Operation.unaryOperation({ -$0 }),
        "√ó" : Operation.binaryOperation({ $0 * $1 }),
        "√∑" : Operation.binaryOperation({ $0 / $1 }),
        "+" : Operation.binaryOperation({ $0 + $1 }),
        "-" : Operation.binaryOperation({ $0 - $1 }),
        "=" : Operation.equals
    ]
    
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    ///
    /// - Parameter symbol: —Å–∏–º–≤–æ–ª –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    mutating func performOperation(_ symbol: String) {
        if let operation = operations[symbol] {
            switch operation {
            case .constant(let value):
                accumulator = value
            case .unaryOperation(let function):
                if accumulator != nil {
                    accumulator = function(accumulator!)
                }
            case .binaryOperation(let function):
                if accumulator != nil {
                    pendingBinaryOperation = PendingBinaryOperation(function: function, firstOperand: accumulator!)
                    accumulator = nil
                }
            case .equals:
                performPendingBinaryOperation()
            }
        }
    }
    
    private mutating func performPendingBinaryOperation() {
        if pendingBinaryOperation != nil && accumulator != nil {
            accumulator = pendingBinaryOperation!.perform(with: accumulator!)
            pendingBinaryOperation = nil
        }
    }
    
    private var pendingBinaryOperation: PendingBinaryOperation?
    
    private struct PendingBinaryOperation {
        let function: (Double,Double) -> Double
        let firstOperand: Double
        
        func perform(with secondOperand: Double) -> Double {
            return function(firstOperand, secondOperand)
        }
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–µ—Ä–∞–Ω–¥
    ///
    /// - Parameter operand: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–π –æ–ø–µ—Ä–∞–Ω–¥
    mutating func setOperand(_ operand: Double) {
        accumulator = operand
    }
    
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    var result: Double? {
        get {
            return accumulator
        }
    }
}
